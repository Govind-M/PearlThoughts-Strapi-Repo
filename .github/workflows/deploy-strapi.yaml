name: Deploy to AWS

on:
  push:
    branches:
      - main


jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-2
      ECR_REPO_NAME: strapi-repo-gov
      ECR_URI: 607700977843.dkr.ecr.us-east-2.amazonaws.com/strapi-repo-gov
      CLUSTER_NAME: strapi-cluster-gov
      SERVICE_NAME: strapi-service-gov
      TASK_DEFINITION_NAME: strapi-task-definition-gov

    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check if ECR Repo exists
        id: check_ecr
        run: |
          if aws ecr describe-repositories --repository-names "$ECR_REPO_NAME" > /dev/null 2>&1; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Terraform Init/Plan/Apply (only if ECR doesn't exist)
        if: steps.check_ecr.outputs.exists == 'false'
        run: |
          terraform init
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan
        working-directory: ./IAC-Task7

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_URI

      - name: Build and Push Image
        run: |
          docker build -t $ECR_URI:latest .
          docker push $ECR_URI:latest

      - name: Register Task Definition & Update ECS Service
        run: |
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition $TASK_DEFINITION_NAME --region $AWS_REGION)
          NEW_IMAGE="$ECR_URI:latest"

          NEW_TASK_DEF=$(echo $TASK_DEFINITION | \
            jq --arg IMAGE "$NEW_IMAGE" \
            '.taskDefinition |
              {family: .family,
               containerDefinitions: (.containerDefinitions | map(.image = $IMAGE)),
               executionRoleArn: .executionRoleArn,
               networkMode: .networkMode,
               requiresCompatibilities: .requiresCompatibilities,
               cpu: .cpu,
               memory: .memory}')

          echo "$NEW_TASK_DEF" > new-task-def.json

          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --region $AWS_REGION \
            --cli-input-json file://new-task-def.json \
            | jq -r '.taskDefinition.taskDefinitionArn')


          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --task-definition "$NEW_TASK_DEF_ARN" \
            --region $AWS_REGION


      - name:  Upload Terraform state
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-state
          path: |
            terraform.tfstate
            terraform.tfstate.backup